@function _gradient-positions-parser($gradient-type, $gradient-positions){

	@if $gradient-positions
	and ($gradient-type == linear)
	and (type-of($gradient-positions) != color){
		$gradient-positions: _linear-positions-parser($gradient-positions);
	}
	@else if $_gradient-positions
	and ($gradient-type == radial)
	and (type-of($gradient-positions) != color) {
		$gradient-positions: _radial-positions-parser($gradient-positions);
	}
	@return $gradient-positions;
}

/////////////////////////
@function _linear-positions-parser($pos){
	$type: type-of(nth($pos, 1));
	$spec: null;
	$degree: null;
	$side: null;
	$corner: null;
	$length: length($pos);
	// Parse Side and corner positions
	@if($length > 1) {
		@if nth($pos, 1) == "to" {
			$side: nth($pos, 2);

			@if $length == 2 {
				$degree:
			}

		}
	}
}


////////////////////////
@function _linear-gradient-parser($image){
  $image: unquote($image);
  $gradients: ();
  $start: str-index($image, "(");
  $end: str-index($image, ",");
  $first-val: str-slice($image, $start + 1, $end - 1);

  $prefix: str-slice($image, 1, $start);
  $suffix: str-slice($image, $end, str-length($image));

  $has-multiple-vals: str-index($first-val, " ");
  $has-single-position: unquote(_position-flipper($first-val) + "");
  $has-angle: is-number(str-slice($first-val, 1, 1));

  @if $has-multiple-vals {
    $gradients: _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals);
  }

  @else if $has-single-position != "" {
    $pos: unquote($has-single-position + "");

    $gradients: (
      webkit-image: -webkit- + $image,
      spec-image: $prefix + "to " + $pos + $suffix
    );
  }

  @else if $has-angle {
    // Rotate degree for webkit
    $gradients: _linear-angle-parser($image, $first-val, $prefix, $suffix);
  }

  @else {
    $gradients: (
      webkit-image: -webkit- + $image,
      spec-image: $image
    );
  }

  @return $gradients;
}
///////////////////////////////
